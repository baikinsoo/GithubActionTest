# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: bis-git-action-test
  CODE_DEPLOY_APPLICATION_NAME: bis-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: bis-codedeploy-app
  
permissions:
  contents: read

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
#Gradle 빌드를 위해 Gradle wrapper 스크립트를 사용하기 위함
    - name: Grant execute permission to Gradle wrapper
#      work 뒤는 리포지토리 이름이고 해당 리포지토리 내에서 Gradle Wrapper 스크립트의 경로를 나타낸다.
      run: chmod +x /home/runner/work/GithubActionTest/GithubActionTest/gradlew
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v3.2.1
      with:
        arguments: build
        
    # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # (5) 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .

    # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip

    # AWS에 로그인합니다. aws-region은 서울로 설정(ap-northeast-2)했습니다
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 이미지 태그에 시간 설정을 하기위해서 현재 시간을 가져옵니다. 
    - name: Get current time
      uses: 1466587594/get-current-time@v2
      id: current-time
      with:
        format: YYYY-MM-DDTHH-mm-ss
        utcOffset: "+09:00"

    - name: Show Current Time
      run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
      
    # docker build -t <이미지_이름>:<태그> <Dockerfile_경로> gradle.yml의 실행 위치는 기본적으로 repository 루트 디렉토리다.
    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -t test:${{steps.current-time.outputs.formattedTime}} .
        docker tag test:${{steps.current-time.outputs.formattedTime}} 420932951054.dkr.ecr.ap-northeast-2.amazonaws.com/test:${{steps.current-time.outputs.formattedTime}}
        docker push 420932951054.dkr.ecr.ap-northeast-2.amazonaws.com/test:${{steps.current-time.outputs.formattedTime}}


